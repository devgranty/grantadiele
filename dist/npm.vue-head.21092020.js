(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{NC0y:function(e,t,n){!function(){"use strict";var t={complement:window.document.title,separator:"|"},n={},o=[],i=[],a=!1,c={shorthand:{ch:"charset",tg:"target",n:"name",he:"http-equiv",ip:"itemprop",c:"content",p:"property",sc:"scheme",r:"rel",h:"href",sz:"sizes",t:"type",s:"src",a:"async",d:"defer",i:"inner"},getPlace:function(e){return window.document.getElementsByTagName(e)[0]},undoTitle:function(e){e.before&&(window.document.title=e.before)},undo:function(){o.length&&(o.forEach((function(e){e.parentElement.removeChild(e)})),o=[])},prepareElement:function(e,t){var n=this;return Object.keys(e).forEach((function(o){var i=n.shorthand[o]||o;i.match(/(body|undo|replace)/g)||("inner"!==i?t.setAttribute(i,e[o]):t.textContent=e[o])})),t},title:function(e){if(e){n.before=t.complement;var o=e.inner+" "+(e.separator||t.separator)+" "+(e.complement||t.complement);window.document.title=o.trim()}},update:function(){o.length&&(o.forEach((function(e,t){if(i[t]&&!i[t].isEqualNode(e))return e.parentElement.replaceChild(i[t],o[t]),void o.splice(t,1,i[t])})),i=[])},add:function(e,t,n){n.appendChild(t),(void 0===e.undo||e.undo)&&o.push(t)},handle:function(e,t,n,o){var a=this;e&&e.forEach((function(e){var c=e.body?a.getPlace("body"):a.getPlace(n),r=window.document.getElementById(e.id);r||(r=window.document.createElement(t),o=!1),r.hasAttribute("id")?a.prepareElement(e,r):(r=a.prepareElement(e,r),o?i.push(r):a.add(e,r,c))}))}};function r(e,o){function i(e){var t=this,n="function"==typeof t.$options.head?t.$options.head.bind(t)():t.$options.head;n&&(Object.keys(n).forEach((function(o){var i=n[o];if(i){var a="function"==typeof i?n[o].bind(t)():n[o];"title"!==o?c.handle(a,o,"head",e):c[o](a)}})),t.$emit("okHead"))}function r(){this.$options.head&&(c.undoTitle(n),c.undo())}a||(a=!0,o&&e.util.extend(t,o),e.version.match(/[1].(.)+/g)&&e.mixin({ready:function(){i.call(this)},destroyed:function(){r.call(this)},events:{updateHead:function(){i.call(this,!0),c.update()}}}),e.version.match(/[2].(.)+/g)&&e.mixin({created:function(){this.$on("updateHead",(function(){i.call(this,!0),c.update()}))},mounted:function(){i.call(this)},beforeDestroy:function(){r.call(this)}}))}r.version="2.2.0","undefined"!=typeof Vue&&Vue.use(r),e.exports=r}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,