(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{M7zF:function(t,e,n){"use strict";var o=n("aCrv"),l=n.n(o);const i=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)};function s(){l.a.update()&&i(s)}i(s);l.a.Easing;const c=(t,e)=>{if(c.installed)return;const n={};Object.defineProperty(n,"scrollTop",{get:()=>document.body.scrollTop||document.documentElement.scrollTop,set(t){document.body.scrollTop=t,document.documentElement.scrollTop=t}}),Object.defineProperty(n,"scrollHeight",{get:()=>document.body.scrollHeight||document.documentElement.scrollHeight}),Object.defineProperty(n,"offsetHeight",{get:()=>window.innerHeight});const o="@@scrollSpyContext",i={},r={},u={},d={},a={};function f(t,e){if(!e)return t.children;const n=p(t),o=[];for(const l of t.querySelectorAll(e))w(l)===n&&o.push(l);return o}function p(t){return t.getAttribute("data-scroll-spy-id")||t.getAttribute("scroll-spy-id")||"default"}function m(t){return!!t.getAttribute("data-scroll-spy-id")||!!t.getAttribute("scroll-spy-id")}function w(t){do{if(m(t))return p(t);t=t.parentElement}while(t);return"default"}function g(t,e){const l=p(t),i=t[o],s=f(t,e);r[l]=s,s[0]&&s[0].offsetParent!==t&&(i.eventEl=window,i.scrollEl=n)}function v(t,e){let n=0;do{isNaN(t.offsetTop)||(n+=t.offsetTop),t=t.offsetParent}while(t&&t!==e);return n}function b(t,e){const n=p(t),i=r[n],{scrollEl:c,options:u}=t[o],d=c.scrollTop;if(i[e]){const t=v(i[e])-u.offset;if(u.easing)return void function(t,e,n,o,i){new l.a.Tween({postion:e}).to({postion:n},o).easing(i).onUpdate((function(e){t.scrollTop=e.postion})).start(),s()}(c,d,t,u.time,u.easing);const n=u.time,o=u.steps,r=parseInt(n/o),a=t-d;for(let t=0;t<=o;t++){const e=d+a/o*t;setTimeout(()=>{c.scrollTop=e},r*t)}}}function h(t,n){!function(t,e){const n=p(t);d[n]=f(t,e.selector);[...d[n]].map(t=>{t[o]={options:e}})}(t,Object.assign({},e.active,n.value))}function y(t,e,n){b(i[e],t)}function E(t,e){const n=p(t),l=f(t,e);for(let t=0;t<l.length;t++){const e=l[t],i=y.bind(null,t,n);e[o]||(e[o]={}),e[o].click||(e.addEventListener("click",i),e[o].click=i)}}e=Object.assign({allowNoActive:!1,sectionSelector:null,data:null,offset:0,time:500,steps:30,easing:null,active:{selector:null,class:"active"},link:{selector:"a"}},e||{}),t.directive("scroll-spy",{bind:function(n,l,s){s.context.$scrollTo=b.bind(null,n);const c=p(n);n[o]={onScroll:function(){const e=p(n),l=r[e],{scrollEl:i,options:c}=n[o];let f;if(i.offsetHeight+i.scrollTop>=i.scrollHeight-10)f=l.length;else for(f=0;f<l.length&&!(v(l[f],i)-c.offset>i.scrollTop);f++);if(f-=1,f<0?f=c.allowNoActive?null:0:c.allowNoActive&&f>=l.length-1&&v(l[f])+l[f].offsetHeight<i.scrollTop&&(f=null),f!==a[e]){let n=u[e];n&&(n.classList.remove(n[o].options.class),u[e]=null),a[e]=f,void 0!==a&&Object.keys(d).length>0&&(n=d[e][a[e]],u[e]=n,n&&n.classList.add(n[o].options.class)),c.data&&t.set(s.context,c.data,f)}},options:Object.assign({},e,l.value),id:p(n),eventEl:n,scrollEl:n},i[c]=n,delete a[c]},inserted:function(t){const{options:{sectionSelector:e}}=t[o];g(t,e);const{eventEl:n,onScroll:l}=t[o];n.addEventListener("scroll",l),l()},componentUpdated:function(t,n){t[o].options=Object.assign({},e,n.value);const{onScroll:l,options:{sectionSelector:i}}=t[o];g(t,i),l()},unbind:function(t){const{eventEl:e,onScroll:n}=t[o];e.removeEventListener("scroll",n)}}),t.directive("scroll-spy-active",{inserted:h,componentUpdated:h}),t.directive("scroll-spy-link",{inserted:function(t,n){E(t,Object.assign({},e.link,n.value).selector)},componentUpdated:function(t,n){E(t,Object.assign({},e.link,n.value).selector)},unbind(t){const e=f(t);for(let n=0;n<e.length;n++){const l=e[n],i=p(t),s=y.bind(null,n,i);l[o]||(l[o]={}),l[o].click&&(l.removeEventListener("click",s),delete l[o].click)}}})};"undefined"!=typeof window&&window.Vue&&c(window.Vue);e.a=c}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,