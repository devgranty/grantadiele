!function(e){function t(t){for(var a,o,r=t[0],p=t[1],c=t[2],h=0,d=[];h<r.length;h++)o=r[h],Object.prototype.hasOwnProperty.call(s,o)&&s[o]&&d.push(s[o][0]),s[o]=0;for(a in p)Object.prototype.hasOwnProperty.call(p,a)&&(e[a]=p[a]);for(l&&l(t);d.length;)d.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],a=!0,r=1;r<n.length;r++){var p=n[r];0!==s[p]&&(a=!1)}a&&(i.splice(t--,1),e=o(o.s=n[0]))}return e}var a={},s={0:0},i=[];function o(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=a,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)o.d(n,a,function(t){return e[t]}.bind(null,a));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var r=window.webpackJsonp=window.webpackJsonp||[],p=r.push.bind(r);r.push=t,r=r.slice();for(var c=0;c<r.length;c++)t(r[c]);var l=p;i.push([11,1]),n()}({11:function(e,t,n){"use strict";n.r(t);var a=n(1),s=n(4),i=n(6),o=n.n(i),r=n(8),p=n(7),c=n.n(p),l=function(){var e=this.$createElement,t=this._self._c||e;return t("transition",{attrs:{"enter-active-class":"animate__animated animate__fadeInLeftBig","leave-active-class":"animate__animated animate__fadeOutLeftBig"}},[t("div",[t("app-nav"),this._v(" "),t("home-hero"),this._v(" "),t("div",{directives:[{name:"scroll-spy",rawName:"v-scroll-spy"}]},[t("home-me"),this._v(" "),t("home-showcase"),this._v(" "),t("home-whyme"),this._v(" "),t("app-footer")],1)],1)])};l._withStripped=!0;var h=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("header",{staticClass:"navbar animate__animated animate__slideInDown animate__delay-3s"},[n("div",{directives:[{name:"scroll-spy-active",rawName:"v-scroll-spy-active",value:{selector:".scrollspy-find",class:"scrollspy-active"},expression:"{selector: '.scrollspy-find', class: 'scrollspy-active'}"}],staticClass:"navbar-container"},[n("router-link",{attrs:{to:"/"}},[n("img",{staticClass:"navbar-brand-logo",attrs:{src:e.navLogoPath,alt:"ga",width:"50",height:"50"}})]),e._v(" "),n("nav",{staticClass:"navbar-links",attrs:{role:"navigation"}},[n("ul",e._l(e.navbarLinks,(function(t){return n("li",{key:t.title},[n("router-link",{staticClass:"scrollspy-find",attrs:{to:t.link}},[e._v(e._s(t.title))])],1)})),0)]),e._v(" "),n("div",[n("button",{staticClass:"navbar-menu-btn",attrs:{id:"navbarModalBtn",role:"button","aria-haspopup":"true"},on:{click:function(t){e.showMenu=!e.showMenu}}},[e._v(e._s(e.showMenu?"Close":"Menu"))]),e._v(" "),n("transition",{attrs:{"enter-active-class":"animate__animated animate__fadeInRightBig","leave-active-class":"animate__animated animate__fadeOutRightBig"}},[n("nav",{directives:[{name:"show",rawName:"v-show",value:e.showMenu,expression:"showMenu"}],staticClass:"navbar-modal",attrs:{id:"navbarModal",role:"menu","aria-modal":"true"}},[n("ul",{directives:[{name:"scroll-spy-active",rawName:"v-scroll-spy-active",value:{selector:".scrollspy-find",class:"scrollspy-active"},expression:"{selector: '.scrollspy-find', class: 'scrollspy-active'}"}]},e._l(e.navbarLinks,(function(t){return n("li",{key:t.title},[n("router-link",{staticClass:"scrollspy-find",attrs:{to:t.link},nativeOn:{click:function(t){e.showMenu=!e.showMenu}}},[e._v(e._s(t.title))])],1)})),0)])])],1)],1)])};h._withStripped=!0;var d={data:function(){return{navLogoPath:"./assets/logos/ga-logo-600x600.png",navbarLinks:[{link:"/#me",title:"Me"},{link:"/#showcase",title:"Showcase"},{link:"/#whyme",title:"Why Me"},{link:"/#contact",title:"Contact"}],showMenu:!1}},methods:{hideNav(){var e=window.pageYOffset;window.onscroll=function(){var t=window.pageYOffset,n=document.querySelector(".navbar");n.style.top=e>t?"0":"-100px",e=t}}},created:function(){this.hideNav()}},m=n(0),g=Object(m.a)(d,h,[],!1,null,null,null);g.options.__file="src/components/layout/AppNav.vue";var v=g.exports,u=function(){var e=this.$createElement;this._self._c;return this._m(0)};u._withStripped=!0;var f={},_=Object(m.a)(f,u,[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"hero",attrs:{id:"myHero"}},[t("div",{staticClass:"hero-welcome-board"},[t("h1",{staticClass:"animate__animated animate__bounceInDown"},[this._v("Web Designer, Developer & Machine Learning enthusiast in Nigeria.")])]),this._v(" "),t("div",{staticClass:"animate__animated animate__bounce animate__infinite animate__delay-4s hero-scroll-down icon-gradient"},[t("i",{staticClass:"fas fa-chevron-up",attrs:{"aria-hidden":"true"}})])])}],!1,null,null,null);_.options.__file="src/pages/HomePage/HomeHero.vue";var w=_.exports,b=function(){var e=this.$createElement,t=this._self._c||e;return t("section",{staticClass:"page-section variation-section"},[t("div",{staticClass:"inner-container"},[t("h1",{staticClass:"section-heading",attrs:{id:"me"}},[this._v("Me "),t("router-link",{attrs:{to:"#me"}},[t("i",{staticClass:"fas fa-link section-anchor-id icon-gradient",attrs:{"aria-hidden":"true"}})])],1),this._v(" "),this._m(0)])])};b._withStripped=!0;var y={},j=Object(m.a)(y,b,[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"about-me-note"},[t("p",[this._v("Hellooo! I'm Grant Adiele (Or you can call me Devgranty), an independent web designer/developer and machine learning enthusiast (not an expert) based in Nigeria.")]),this._v(" "),t("p",[this._v("My goal is to create functional and intutive interfaces that captures users and promotes your brand.")]),this._v(" "),t("p",[this._v("Aside programming, I enjoy playing games, moonwalking, watching movies, listening to music and daydreaming.")])])}],!1,null,null,null);j.options.__file="src/pages/HomePage/HomeMe.vue";var P=j.exports,k=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",{staticClass:"page-section"},[n("div",{staticClass:"inner-container"},[n("h1",{staticClass:"section-heading",attrs:{id:"showcase"}},[e._v("Showcase "),n("router-link",{attrs:{to:"#showcase"}},[n("i",{staticClass:"fas fa-link section-anchor-id icon-gradient",attrs:{"aria-hidden":"true"}})])],1),e._v(" "),n("p",{staticClass:"section-headline"},[e._v("Some projects I've worked on independently.")]),e._v(" "),n("div",{staticClass:"container-fluid"},[n("div",{staticClass:"row"},e._l(e.projects,(function(t){return n("div",{key:t.title,staticClass:"col-12 col-lg-6 mb-4"},[n("div",{staticClass:"project-card",attrs:{"data-aos":"fade-up"}},[n("router-link",{staticClass:"project-link",attrs:{to:t.link}},[n("img",{staticClass:"project-thumbnail",attrs:{src:t.imagePath}}),e._v(" "),n("div",{staticClass:"project-details"},[n("h3",{style:t.details},[e._v(e._s(t.title))]),e._v(" "),n("h2",{style:t.details},[e._v(e._s(t.type))])])])],1)])})),0)])])])};k._withStripped=!0;var x={data:function(){return{projects:[{link:"case/project-nx",details:{color:"#000"},title:"project nx",type:"Web design, development",imagePath:"https://inspiring-bhabha-680629.netlify.app/project_nx/project-nx-cover-600x600.png"},{link:"case/willow-investment",details:{color:"#fff"},title:"willow investment",type:"Web design, development",imagePath:"https://inspiring-bhabha-680629.netlify.app/willow_investment/willow-investment-cover-600x600.png"},{link:"case/movynet",details:{color:"#dd0404"},title:"movynet",type:"Web design, development",imagePath:"https://inspiring-bhabha-680629.netlify.app/movynet/movynet-cover-600x600.png"},{link:"case/jovianbiz",details:{color:"#fff"},title:"jovianbiz",type:"Web design, development",imagePath:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/jovianbiz-cover-600x600.png"},{link:"case/advbitcoinearns",details:{color:"#ee2000"},title:"advbitcoinearns",type:"Web design, development",imagePath:"https://inspiring-bhabha-680629.netlify.app/advbitcoinearns/advbitcoinearns-cover-600x600.png"},{link:"case/myafriconnect",details:{color:"#fff"},title:"myafriconnect",type:"Web design, development",imagePath:"https://inspiring-bhabha-680629.netlify.app/myafriconnect/logos/logo-1080x1080.jpg"}]}}},D=Object(m.a)(x,k,[],!1,null,null,null);D.options.__file="src/pages/HomePage/HomeShowcase.vue";var C=D.exports,M=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",{staticClass:"page-section"},[n("div",{staticClass:"inner-container"},[n("h1",{staticClass:"section-heading",attrs:{id:"whyme"}},[e._v("Why Me "),n("router-link",{attrs:{to:"#whyme"}},[n("i",{staticClass:"fas fa-link section-anchor-id icon-gradient",attrs:{"aria-hidden":"true"}})])],1),e._v(" "),n("p",{staticClass:"section-headline"},[e._v('Still not convinced? Here are some "WHY ME" reasons.')]),e._v(" "),n("div",{staticClass:"whyme-carousel"},e._l(e.reasons,(function(t){return n("div",{key:t.title,staticClass:"carousel-cell"},[n("ul",[n("li",[n("i",{staticClass:"icon-gradient",class:t.iconClass,attrs:{"aria-hidden":"true"}})]),e._v(" "),n("li",[n("h2",[e._v(e._s(t.title))])]),e._v(" "),n("li",[e._v(e._s(t.comment))])])])})),0),e._v(" "),n("div",{staticClass:"whyme-reason"},[n("div",{staticClass:"row"},e._l(e.reasons,(function(t){return n("div",{key:t.title,class:t.columnClass},[n("div",{staticClass:"reason-cell",attrs:{"data-aos":"fade-up"}},[n("ul",[n("li",[n("i",{staticClass:"icon-gradient",class:t.iconClass,attrs:{"aria-hidden":"true"}})]),e._v(" "),n("li",[n("h2",[e._v(e._s(t.title))])]),e._v(" "),n("li",[e._v(e._s(t.comment))])])])])})),0)])])])};M._withStripped=!0;var I={data:function(){return{reasons:[{columnClass:"col-lg-4 offset-lg-4 mb-5",iconClass:"fas fa-smile",title:"Best Quality",comment:"Nothing but the BEST."},{columnClass:"col-lg-6 mb-5",iconClass:"fas fa-gem",title:"Fully Customized",comment:"Like nothing you've seen before, build it from the ground up."},{columnClass:"col-lg-4 offset-lg-1 mb-5",iconClass:"fas fa-money-bill-wave",title:"Affordable",comment:"Not to be mistaken for CHEAP."},{columnClass:"col-lg-4 offset-lg-1 mb-5",iconClass:"fas fa-shipping-fast",title:"Fast Delivery",comment:"Wouldn't have to rush it, just be there on time."},{columnClass:"col-lg-6 mb-5",iconClass:"fas fa-envelope",title:"Support",comment:"Provide all required assistance till you are up and running with your project."}]}}},S=Object(m.a)(I,M,[],!1,null,null,null);S.options.__file="src/pages/HomePage/HomeWhyme.vue";var L=S.exports,T=function(){var e=this.$createElement;this._self._c;return this._m(0)};T._withStripped=!0;var A={},E=Object(m.a)(A,T,[function(){var e=this.$createElement,t=this._self._c||e;return t("footer",{staticClass:"contact-footer",attrs:{id:"contact"}},[t("div",{staticClass:"inner-container"},[t("h1",{staticClass:"section-icon-heading"},[t("a",{attrs:{href:"#contact"}},[t("i",{staticClass:"fas fa-envelope icon-gradient",attrs:{"aria-hidden":"true"}})])]),this._v(" "),t("h2",{staticClass:"contact-note"},[this._v("You're a mail away. Email me at "),t("a",{attrs:{href:"mailto:hello.devgranty@gmail.com"}},[this._v("hello.devgranty@gmail.com")])])])])}],!1,null,null,null);E.options.__file="src/components/layout/AppFooter.vue";var O=E.exports,H={components:{AppNav:v,HomeHero:w,HomeMe:P,HomeShowcase:C,HomeWhyme:L,AppFooter:O},data:function(){return{params:{title:"Design Portfolio of Grant Adiele",description:"The design portfolio of Grant Adiele, an independent web designer and developer based in Nigeria.",site_name:"Grant Adiele",site_url:"https://grantadiele.web.app/"}}},mounted:function(){particlesJS.load("myHero","./assets/json/myparticles-config.json");var e=document.querySelector(".whyme-carousel");new Flickity(e,{cellAlign:"center",contain:!0,wrapAround:!0,autoPlay:3500});AOS.init()},head:{title:function(){return{inner:this.params.title,seperator:"",complement:""}},meta:function(){return[{name:"robots",content:"index"},{name:"description",content:this.params.description},{name:"author",content:this.params.site_name},{property:"og:title",content:this.params.title},{property:"og:type",content:"website"},{property:"og:image",content:this.params.site_url+"assets/icons/ga-icon-256x256.png"},{property:"og:image:type",content:"image/png"},{property:"og:image:width",content:"256"},{property:"og:image:height",content:"256"},{property:"og:url",content:this.params.site_url},{property:"og:description",content:this.params.description},{property:"og:locale",content:"en_US"},{property:"og:site_name",content:this.params.site_name},{property:"twitter:card",content:"summary"},{property:"twitter:creator",content:"@devgranty"},{property:"twitter:title",content:this.params.title},{property:"twitter:description",content:this.params.description},{property:"twitter:image",content:this.params.site_url+"assets/icons/ga-icon-256x256.png"}]},link:function(){return[{rel:"canonical",href:this.params.site_url}]}}},N=Object(m.a)(H,l,[],!1,null,null,null);N.options.__file="src/pages/HomePage/index.vue";var z=N.exports,W=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{"enter-active-class":"animate__animated animate__fadeInLeftBig","leave-active-class":"animate__animated animate__fadeOutLeftBig"}},[n("div",[n("app-nav"),e._v(" "),n("showcase-context",{attrs:{"project-name":e.showcase.projectName,"project-date":e.showcase.projectDate,"project-display-photo-path":e.showcase.projectDisplayPhotoPath,"project-type":e.showcase.projectType,"project-platform":e.showcase.projectPlatform,"project-external-link":e.showcase.projectExternalLink,"project-context-photo-path":e.showcase.projectContextPhotoPath}},[n("span",{domProps:{innerHTML:e._s(e.showcase.projectDesc)}})]),e._v(" "),n("showcase-planning",[n("span",{domProps:{innerHTML:e._s(e.showcase.projectPlanning)}})]),e._v(" "),n("showcase-result",{attrs:{"project-screenshots":e.showcase.projectScreenshots}},[n("span",{domProps:{innerHTML:e._s(e.showcase.projectResult)}})]),e._v(" "),n("app-footer")],1)])};W._withStripped=!0;var q=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("section",{staticClass:"showcase-header"},[n("div",{staticClass:"project-name"},[n("h2",[e._v(e._s(e.projectName))]),e._v(" "),n("p",{staticClass:"project-date"},[e._v(e._s(e.projectDate))])]),e._v(" "),n("div",[n("img",{staticClass:"project-display-photo",attrs:{src:e.projectDisplayPhotoPath,"data-aos":"fade-up"}})]),e._v(" "),n("div",{staticClass:"container-fluid project-context"},[n("div",{staticClass:"row"},[n("div",{staticClass:"col-12 col-lg-6 my-5 project-context-details",attrs:{"data-aos":"fade"}},[n("p",{staticClass:"project-type"},[e._v(e._s(e.projectType))]),e._v(" "),n("p",{staticClass:"project-platform"},[e._v(e._s(e.projectPlatform))]),e._v(" "),n("a",{attrs:{href:e.projectExternalLink,target:"_blank"}},[e._v("Visit site")])]),e._v(" "),n("div",{staticClass:"col-12 col-lg-6 my-5 project-context-desc article-slot",attrs:{"data-aos":"fade"}},[n("div",[e._t("default")],2)])])]),e._v(" "),n("div",{staticClass:"project-context-photo-container"},[n("img",{staticClass:"project-context-photo",attrs:{src:e.projectContextPhotoPath,"data-aos":"fade-up"}})])])};q._withStripped=!0;var B={props:{projectName:{type:String,required:!0},projectDate:{type:String,required:!0},projectDisplayPhotoPath:{type:String,required:!0},projectType:{type:String,required:!0},projectPlatform:{type:String,required:!0},projectExternalLink:{type:String,required:!0},projectContextPhotoPath:{type:String,required:!0}}},$=Object(m.a)(B,q,[],!1,null,null,null);$.options.__file="src/pages/ShowcasePage/ShowcaseContext.vue";var F=$.exports,R=function(){var e=this.$createElement,t=this._self._c||e;return t("section",{staticClass:"page-section",attrs:{"data-aos":"fade"}},[t("div",{staticClass:"inner-container article-slot"},[this._m(0),this._v(" "),t("div",{staticClass:"slot-text"},[this._t("default")],2)])])};R._withStripped=!0;var J={},G=Object(m.a)(J,R,[function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{staticClass:"showcase-sub-heading"},[t("span",[this._v("2/3")]),this._v(" planning")])}],!1,null,null,null);G.options.__file="src/pages/ShowcasePage/ShowcasePlanning.vue";var Q=G.exports,Y=function(){var e=this.$createElement,t=this._self._c||e;return t("section",{staticClass:"page-section",attrs:{"data-aos":"fade"}},[t("div",{staticClass:"inner-container article-slot"},[this._m(0),this._v(" "),t("div",{staticClass:"slot-text"},[this._t("default")],2),this._v(" "),t("div",{staticClass:"project-result-photo-container"},[t("ul",this._l(this.projectScreenshots,(function(e){return t("li",{key:e.src,attrs:{"data-aos":"fade-up"}},[t("img",{staticClass:"project-result-photo",attrs:{src:e.src}})])})),0)])])])};Y._withStripped=!0;var U={props:{projectScreenshots:{type:Array,required:!0}}},V=Object(m.a)(U,Y,[function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{staticClass:"showcase-sub-heading"},[t("span",[this._v("3/3")]),this._v(" result")])}],!1,null,null,null);V.options.__file="src/pages/ShowcasePage/ShowcaseResult.vue";var X=V.exports,K={"project-nx":{projectName:"Project NX",projectDate:"2020",projectDisplayPhotoPath:"https://inspiring-bhabha-680629.netlify.app/project_nx/screenshots/342462-PA9Q6O-452.png",projectType:"Web Design, Development",projectPlatform:"Mobile, Tablet, Desktop",projectExternalLink:"about:blank",projectContextPhotoPath:"https://inspiring-bhabha-680629.netlify.app/project_nx/project-nx-context-2880x1800.png",projectDesc:"<p>How about reading stories right on your mobile, on the go?!</p>\n        <p>Reading stories you love right on your mobile devices is fun and I want to even make that a lot better!</p>\n        <p>Project NX is an experimental platform that allows you to read stories right on your device (Mobile, Labtop or even Desktop). The concept of the platform design enables for quick finding of stories and articles I think you'd be interested in reading.</p>",projectPlanning:'<p>The design and development implementations were pretty straight foward. Designed with the Bootstrap 4 material design framework, I was able to quickly achieve the design pattern that suites an immersive platform of stories! The material design was the right way to go because I wanted the design to look as real as possible.</p>\n        <p>To promote readablity, the font of choice was the well known Roboto. Adding more realness to Project NX, Font Awesome icons were used.</p>\n        <p>The backend powered by PHP and MySQL database using a framework I created <a href="//github.com/devgranty/tm_framework" rel="external" target="_blank">here</a></p>\n        <p>Please note: Project NX is still in its beta and has not been released to the public and I hope on doing that pretty soon!.</p>',projectResult:"<p>Mission accomplished!</p>\n        <p>It's always an amazing feeling when you create stuffs and see millions of people make the best out of it each day. And Hey!, Don't ask the meaning of \"NX\" because I certainly have no idea, probably daydreaming when I gave it that name 😴</p>",projectScreenshots:[{src:"https://inspiring-bhabha-680629.netlify.app/project_nx/screenshots/localhost_projects_project_nx_(Laptop with HiDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/project_nx/screenshots/localhost_projects_project_nx_(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/project_nx/screenshots/localhost_projects_project_nx_forum.php_p=the-three-billy-goats-gruff(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/project_nx/screenshots/localhost_projects_project_nx_signup.php(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/project_nx/screenshots/localhost_projects_project_nx_signin.php(Laptop with MDPI screen) (1).png"},{src:"https://inspiring-bhabha-680629.netlify.app/project_nx/screenshots/localhost_projects_project_nx_signin.php(Laptop with MDPI screen).png"}]},"willow-investment":{projectName:"Willow Investment",projectDate:"2019",projectDisplayPhotoPath:"https://inspiring-bhabha-680629.netlify.app/willow_investment/screenshots/adult-attire-commerce-1367269.png",projectType:"Web Design, Development",projectPlatform:"Mobile, Tablet, Desktop",projectExternalLink:"//willowinvestment.net",projectContextPhotoPath:"https://inspiring-bhabha-680629.netlify.app/willow_investment/willow-investment-context-2880x1800.png",projectDesc:"<p>Willow Investment is a Bitcoin Investment platform owned and managed by the Willow Group.</p>\n        <p>Is Willow secured? - Yes!, Willow is pefectly secured as no transactions are done on the site. All transactions require an encrypted bitcoin wallet and data is only transferred via APIs.</p>",projectPlanning:"<p><strong>Problem Solving</strong> <br> The entire idea was to create something that allowed commumication between cryptocurrencies, store them, perform mathematical operations on them without them being there. This had to be as accurate as possible.</p>\n        <p>To solve this problem we resort to APIs - Application Programming Interface. We could store somewhere else while making things happen in those places and returning accurate results in their exact quantities and not enhanced. PROBLEM SOLVED!</p>\n        <p><strong>Design &amp; Development</strong> <br> Willow Investment like any other project I've worked on sort simplicity in the highest form, we won't want delays in communications, so we sort after the best yet lightest technology stacks to make this happen. Bootstrap 3 was used to quickly create style the markup, Jquery with JavaScript.</p>\n        <p>For development PHP 7, an early version of a framework I developed and MySQL was used as our database.</p>",projectResult:'<p>"Amazing work Grant!", Delivering quickly, while making the entire project fuctional and intutive is not just about selecting the right code stack, the technologies has to be used correctly. Cheers to another great success 🥂</p>',projectScreenshots:[{src:"https://inspiring-bhabha-680629.netlify.app/willow_investment/screenshots/localhost_projects_willow_investment_(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/willow_investment/screenshots/localhost_projects_willow_investment_signup.php(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/willow_investment/screenshots/localhost_projects_willow_investment_account_login.php(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/willow_investment/screenshots/localhost_projects_willow_investment_(Laptop with MDPI screen) (3).png"},{src:"https://inspiring-bhabha-680629.netlify.app/willow_investment/screenshots/localhost_projects_willow_investment_(Laptop with MDPI screen) (1).png"},{src:"https://inspiring-bhabha-680629.netlify.app/willow_investment/screenshots/localhost_projects_willow_investment_(Laptop with MDPI screen) (2).png"}]},movynet:{projectName:"Movynet",projectDate:"2019",projectDisplayPhotoPath:"https://inspiring-bhabha-680629.netlify.app/movynet/screenshots/shazam-zachary-levi-jack-dylan-grazer.jpg",projectType:"Web Design, Development",projectPlatform:"Mobile, Tablet, Desktop",projectExternalLink:"//movynet.com",projectContextPhotoPath:"https://inspiring-bhabha-680629.netlify.app/movynet/movynet-context-2880x1800.png",projectDesc:"<p>Simple, fast, useful and as immersive as possible. It's all about entertainment, it should as well be entertaining.</p>\n        <p>Movynet is a simple and basic movie website I started personly to get know how some things in programming work. It's quite obvious that movies are one of the most entaintaining things and definitely worth some try.</p>",projectPlanning:"<p><strong>Planning, Design &amp; Development</strong> <br> When I started building Movynet, I was curious about some things in programming. I knew that one of the best ways to try them out was doing it with one of my favorite hobbies.</p>\n        <p>It took about 2 months to complete the project and during that period I got familiar with APIs, Software architectures, e.g MVC, design patterns and some frameworks.</p>\n        <p>Movynet's data are all sourced through the TMDB movie API, from which parts are stored in the database. All these where made possible with PHP and MYSQL. Movynet used the earliest and very first version of a framework I created - TM framework. The idea of the framework was to create classes, e.g Database, Datetime, Validation, Filesystem, String, Encryption classes, functions and general project configurations which allowed me scaffold newer projects in PHP even faster!</p>\n        <p>Movynet design was a mix of bootstrap, custom CSS and Jquery.</p>\n        <p>Movynet was also the first PWA - Progressive Web App I designed, understanding how service workers work.</p>",projectResult:'<p>"The colors, design and entire website works well", this has been one of the greatest projects I\'ve done in a short amount of time.</p>\n        <p>The outcome?, Very desireable.</p>',projectScreenshots:[{src:"https://inspiring-bhabha-680629.netlify.app/movynet/logos/movynet_logo_552x180.png"},{src:"https://inspiring-bhabha-680629.netlify.app/movynet/screenshots/localhost_projects_movynet_(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/movynet/screenshots/localhost_projects_movynet_view.php_vwid=246&type=Movie&from=home(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/movynet/screenshots/localhost_projects_movynet_view.php_vwid=246&type=Movie&from=home(Laptop with MDPI screen) (1).png"},{src:"https://inspiring-bhabha-680629.netlify.app/movynet/screenshots/localhost_projects_movynet_view.php_vwid=246&type=Movie&from=home(Laptop with MDPI screen) (4).png"},{src:"https://inspiring-bhabha-680629.netlify.app/movynet/screenshots/localhost_projects_movynet_view.php_vwid=246&type=Movie&from=home(Laptop with MDPI screen) (3).png"},{src:"https://inspiring-bhabha-680629.netlify.app/movynet/screenshots/localhost_projects_movynet_view.php_vwid=246&type=Movie&from=home(Laptop with MDPI screen) (2).png"}]},jovianbiz:{projectName:"Jovianbiz",projectDate:"2018",projectDisplayPhotoPath:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/screenshots/adult-artist-band-274406.gif",projectType:"Web Design, Development",projectPlatform:"Mobile, Tablet, Desktop",projectExternalLink:"//jovianbiz.com",projectContextPhotoPath:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/jovianbiz-context-2880x1800.png",projectDesc:"<p>Jovianbiz is a combination of two business segments.</p>\n        <p>The Jovian Hair is concerned with sales of hair, hair products and accessories, while, Jovian Events is concerned with providing event services.</p>\n        <p>The amazing thing about Jovianbiz is their passion. The believe they can bring out the beauty in every thing and that is why I was excited to work with them.</p>",projectPlanning:"<p><strong>Challenges</strong> <br> Finding the perfect way to combine and register two unrelated business segments and still making them stand out needed a little bit of magic, we had to draft possible ways to accomplish this. To solve this challenge we ended building a standard landing page for the both segments, creating a seperate subdomain and adding the links to each segment, task completed!</p>\n        <p><strong>Design, Development and problem solving</strong> <br> Selecting the right colors for a business websites with two segments is important. Professional colors like blue(#00A1FF), off-white(#EEEEEE) and black(#000000) were colors of choice.</p>\n        <p>We wanted the logo as simple as possible, so we sticked to a textbased logo, employing the Sofia Regular font.</p>\n        <p>The rest of the website needed something more bold, professional and modern, Lato was the best font to accomplish this.</p>\n        <p>As a business website we needed more images to help convey what was really happening on the site with lesser words.</p>",projectResult:'<p>"Wow!, this looks so beautiful and it is exactly what I needed.", Yes, once again our design strategy gave the best results!</p>',projectScreenshots:[{src:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/screenshots/www.localhost_projects_jovianbiz_index.php(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/screenshots/www.localhost_projects_jovianbiz_services_(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/screenshots/www.localhost_projects_jovianbiz_hair_(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/screenshots/www.localhost_projects_jovianbiz_hair_category.php_cat=h_h_w(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/screenshots/www.localhost_projects_jovianbiz_hair_product.php_pid=16(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/jovianbiz/screenshots/www.localhost_projects_jovianbiz_services_(Laptop with MDPI screen) (1).png"}]},advbitcoinearns:{projectName:"AdvBitcoinEarns",projectDate:"2018",projectDisplayPhotoPath:"https://inspiring-bhabha-680629.netlify.app/advbitcoinearns/screenshots/2847547.png",projectType:"Web Design, Development",projectPlatform:"Mobile, Tablet, Desktop",projectExternalLink:"//advbitcoinearns.com",projectContextPhotoPath:"https://inspiring-bhabha-680629.netlify.app/advbitcoinearns/advbitcoinearns-context-2880x1800.png",projectDesc:"<p>AdvBitcoinEarns is a bitcoin investment platform, created for the sole purpose of safe and secure bitcoin investments.</p>",projectPlanning:"<p>AdvBitoinEarns design and development was one of the quickest and fastest I have ever worked on. This was a result of the AdvBitcoinEarns group's need to launch the platform as quick as possible.</p>\n        <p>The entire project took about 3 weeks to complete, as there were ni frameworks or library used in the development of the project. The entire frontend was created with custom design codes.</p>\n        <p>The backend fully powered by PHP and a MySQL server utilizing APIs and method of communication.</p>",projectResult:"<p>Since AdvBitcoinEarns was one my earliest independent project developemt, I was able to understand most functionalities of a web app and better ways to improve functionality, design and development.</p>",projectScreenshots:[{src:"https://inspiring-bhabha-680629.netlify.app/advbitcoinearns/screenshots/www.localhost_projects_advbitcoinearns_(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/advbitcoinearns/screenshots/www.localhost_projects_advbitcoinearns_signup.php(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/advbitcoinearns/screenshots/www.localhost_projects_advbitcoinearns_login_(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/advbitcoinearns/screenshots/www.localhost_projects_advbitcoinearns_login_withdraw.php(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/advbitcoinearns/screenshots/www.localhost_projects_advbitcoinearns_index.php(Laptop with MDPI screen).png"}]},myafriconnect:{projectName:"MyAfriConnect",projectDate:"2018",projectDisplayPhotoPath:"https://inspiring-bhabha-680629.netlify.app/myafriconnect/screenshots/cellist-band-music-performance.jpg",projectType:"Web Design, Development",projectPlatform:"Mobile, Tablet, Desktop",projectExternalLink:"//myafriconnect.com",projectContextPhotoPath:"https://inspiring-bhabha-680629.netlify.app/myafriconnect/myafriconnect-context-2880x1800.png",projectDesc:'<p>"Even though it is simple and quiet, we made great sounds!"</p>\n        <p>MyAfriconnect is an audio and video music download platform. The idea is to build a native music catalogue for everyone to download their favourite African music.</p>',projectPlanning:'<p><strong>Challenges</strong> <br> Designing and creating the native feel of an audio &amp; video downloading website was a bit challenging. The right colors, fonts and general design had to be in place.</p>\n        <p><strong>Design</strong> <br> We needed to download the right template from <a href="https://w3layouts.com/elvis-a-entertainment-category-flat-bootstrap-responsive-web-template/" rel="external" target="_blank">w3layouts.com</a>, few modifications where made on the UI to give it the native African look we combined the Ghanaian colors and used the <cite>CF Flowers by Destiny</cite> font.</p>\n        <p><strong>Development</strong> <br> To improve functionality light weight libraries like JQuery and and Bootstrap were implemented. The back end handled by PHP were used for dynamic rendering of pages and Database of choice was MySQL.</p>',projectResult:"<p>The final outcome was powerful platform that keeps visitors in a total state of excitement. We recorded a tremendous increase in the daily visits from most African country, now that's what I call satisfaction!</p>",projectScreenshots:[{src:"https://inspiring-bhabha-680629.netlify.app/myafriconnect/screenshots/127.0.0.1_5500_(Laptop with MDPI screen) (2).png"},{src:"https://inspiring-bhabha-680629.netlify.app/myafriconnect/screenshots/127.0.0.1_5500_(Laptop with MDPI screen) (1).png"},{src:"https://inspiring-bhabha-680629.netlify.app/myafriconnect/screenshots/127.0.0.1_5500_(Laptop with MDPI screen).png"},{src:"https://inspiring-bhabha-680629.netlify.app/myafriconnect/screenshots/127.0.0.1_5500_single.html(Laptop with MDPI screen).png"}]}},Z={components:{AppNav:v,ShowcaseContext:F,ShowcasePlanning:Q,ShowcaseResult:X,AppFooter:O},watch:{$route:"fetchData"},methods:{fetchData(){const e=this.$route.params.pageId;Object.keys(K).includes(e)?this.showcase=K[e]:this.$router.push({name:"404"})}},created:function(){this.fetchData()},mounted:function(){AOS.init()},data:function(){return{showcase:null,params:{description:"The design portfolio of Grant Adiele, an independent web designer and developer based in Nigeria.",site_name:"Grant Adiele",site_url:"https://grantadiele.web.app/#"+this.$route.path}}},head:{title:function(){return{inner:this.showcase.projectName,seperator:"",complement:this.params.site_name}},meta:function(){return[{name:"robots",content:"index"},{name:"description",content:this.params.description},{name:"author",content:this.params.site_name},{property:"og:title",content:this.params.title},{property:"og:type",content:"website"},{property:"og:image",content:this.params.site_url+"assets/icons/ga-icon-256x256.png"},{property:"og:image:type",content:"image/png"},{property:"og:image:width",content:"256"},{property:"og:image:height",content:"256"},{property:"og:url",content:this.params.site_url},{property:"og:description",content:this.params.description},{property:"og:locale",content:"en_US"},{property:"og:site_name",content:this.params.site_name},{property:"twitter:card",content:"summary"},{property:"twitter:creator",content:"@devgranty"},{property:"twitter:title",content:this.params.title},{property:"twitter:description",content:this.params.description},{property:"twitter:image",content:this.params.site_url+"assets/icons/ga-icon-256x256.png"}]},link:function(){return[{rel:"canonical",href:this.params.site_url}]}}},ee=Object(m.a)(Z,W,[],!1,null,null,null);ee.options.__file="src/pages/ShowcasePage/index.vue";var te=ee.exports,ne=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("transition",{attrs:{"enter-active-class":"animate__animated animate__fadeInLeftBig","leave-active-class":"animate__animated animate__fadeOutLeftBig"}},[n("div",[n("div",{staticStyle:{position:"absolute",left:"50%",top:"10%",width:"100%",margin:"0",padding:"0","margin-left":"-50%"}},[n("h1",{staticStyle:{color:"#ddd","text-align":"center","font-size":"calc(10em + 2vw)"}},[e._v("4"),n("span",{staticStyle:{color:"rgba(255, 0, 0, 0.42)"}},[e._v("0")]),e._v("4")]),e._v(" "),n("p",{staticStyle:{"text-align":"center","font-weight":"900"}},[e._v("NOT FOUND")]),e._v(" "),n("p",{staticStyle:{padding:"20px",color:"#999","text-align":"center","line-height":"1.6"}},[e._v("You seem lost, that happens! Hold my hands let me take you right "),n("router-link",{staticStyle:{color:"green"},attrs:{to:"/"}},[e._v("home")])],1)])])])};ne._withStripped=!0;var ae={data:function(){return{params:{title:"404"}}},head:{title:function(){return{inner:this.params.title,seperator:"",complement:"Not Found"}},meta:function(){return[{name:"robots",content:"noindex"}]}}},se=Object(m.a)(ae,ne,[],!1,null,null,null);se.options.__file="src/pages/NotFoundPage.vue";var ie=se.exports;a.a.use(s.a),a.a.use(o.a),a.a.use(r.a);const oe=[{path:"/",name:"home",component:z},{path:"/case/:pageId",name:"case",component:te},{path:"*",name:"404",component:ie}],re=new s.a({routes:oe,mode:"hash",scrollBehavior:(e,t,n)=>e.hash?{selector:e.hash}:n||{x:0,y:0}});a.a.use(c.a,{id:"UA-170094721-1",router:re});new a.a({router:re}).$mount("#app")}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,